#ifndef AST_HEADER
#define AST_HEADER

#include "hash.h"

#define MAX_CHILDREN 5
typedef enum {
    NODE_PROGRAM,
    NODE_DECLARATIONS_LIST,
    NODE_DECLARATION,
    NODE_VAR_DECLARATION,
    NODE_VECTOR_DECLARATION,
    NODE_FUNC_DECLARATION,
    NODE_PARAM_LIST,
    NODE_PARAM,
    NODE_INITIAL_VALUE,
    NODE_VALUES_LIST,
    NODE_BLOCK,
    NODE_COMMANDS_LIST,
    NODE_COMMAND,
    NODE_ASSIGNMENT,
    NODE_VECTOR,
    NODE_CONTROL_FLOW,
    NODE_EXPRESSION,
    NODE_FUNC_CALL,
    NODE_ARGS_LIST,
    NODE_ADDITION,
    NODE_SUBTRACTION,
    NODE_MULTIPLICATION,
    NODE_DIVISION,
    NODE_LESS_THAN,
    NODE_GREATER_THAN,
    NODE_LOGICAL_OR,
    NODE_LOGICAL_AND,
    NODE_LESS_THAN_EQUAL,
    NODE_GREATER_THAN_EQUAL,
    NODE_EQUAL,
    NODE_NOT_EQUAL,
    NODE_LITERAL_INT,
    NODE_LITERAL_CHAR,
    NODE_LITERAL_REAL,
    NODE_LITERAL_FALSE,
    NODE_LITERAL_TRUE,
    NODE_LITERAL_STRING,
    NODE_TOKEN_ERROR,
    NODE_TOKEN_IDENTIFIER,
    NODE_TYPE,
    NODE_KW_CHAR,
    NODE_KW_READ,
    NODE_KW_INT,
    NODE_KW_FLOAT,
    NODE_KW_BOOL,
    NODE_KW_PRINT,
    NODE_KW_RETURN,
    NODE_KW_IF,
    NODE_KW_IF_ELSE,
    NODE_KW_WHILE,
} NodeType;

typedef struct ASTNode_s {
    NodeType type;
    struct ASTNode_s* children[MAX_CHILDREN];
    // Additional fields can be added as necessary
    HASH_NODE value;  // For identifiers, literals, etc.
} ASTNode;

ASTNode* createNode(NodeType type, ASTNode* children[MAX_CHILDREN], HASH_NODE* value);

#endif
